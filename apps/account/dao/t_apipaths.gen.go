// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.pypygo.com/vertex/ollie/apps/account/dao/model"
)

func newTApipath(db *gorm.DB, opts ...gen.DOOption) tApipath {
	_tApipath := tApipath{}

	_tApipath.tApipathDo.UseDB(db, opts...)
	_tApipath.tApipathDo.UseModel(&model.TApipath{})

	tableName := _tApipath.tApipathDo.TableName()
	_tApipath.ALL = field.NewAsterisk(tableName)
	_tApipath.ID = field.NewInt64(tableName, "id")
	_tApipath.SvcName = field.NewString(tableName, "svc_name")
	_tApipath.SvcAPI = field.NewString(tableName, "svc_api")
	_tApipath.Roles = field.NewString(tableName, "roles")
	_tApipath.CreateAt = field.NewInt64(tableName, "create_at")
	_tApipath.UpdateAt = field.NewInt64(tableName, "update_at")
	_tApipath.DeleteAt = field.NewInt64(tableName, "delete_at")

	_tApipath.fillFieldMap()

	return _tApipath
}

type tApipath struct {
	tApipathDo

	ALL      field.Asterisk
	ID       field.Int64
	SvcName  field.String // 对外提供api服务的名称
	SvcAPI   field.String // api path 名称
	Roles    field.String // RBAC权限的角色绑定，默认admin拥有，前端多选操作更新改集合
	CreateAt field.Int64
	UpdateAt field.Int64
	DeleteAt field.Int64

	fieldMap map[string]field.Expr
}

func (t tApipath) Table(newTableName string) *tApipath {
	t.tApipathDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tApipath) As(alias string) *tApipath {
	t.tApipathDo.DO = *(t.tApipathDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tApipath) updateTableName(table string) *tApipath {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.SvcName = field.NewString(table, "svc_name")
	t.SvcAPI = field.NewString(table, "svc_api")
	t.Roles = field.NewString(table, "roles")
	t.CreateAt = field.NewInt64(table, "create_at")
	t.UpdateAt = field.NewInt64(table, "update_at")
	t.DeleteAt = field.NewInt64(table, "delete_at")

	t.fillFieldMap()

	return t
}

func (t *tApipath) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tApipath) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["svc_name"] = t.SvcName
	t.fieldMap["svc_api"] = t.SvcAPI
	t.fieldMap["roles"] = t.Roles
	t.fieldMap["create_at"] = t.CreateAt
	t.fieldMap["update_at"] = t.UpdateAt
	t.fieldMap["delete_at"] = t.DeleteAt
}

func (t tApipath) clone(db *gorm.DB) tApipath {
	t.tApipathDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tApipath) replaceDB(db *gorm.DB) tApipath {
	t.tApipathDo.ReplaceDB(db)
	return t
}

type tApipathDo struct{ gen.DO }

type ITApipathDo interface {
	gen.SubQuery
	Debug() ITApipathDo
	WithContext(ctx context.Context) ITApipathDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITApipathDo
	WriteDB() ITApipathDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITApipathDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITApipathDo
	Not(conds ...gen.Condition) ITApipathDo
	Or(conds ...gen.Condition) ITApipathDo
	Select(conds ...field.Expr) ITApipathDo
	Where(conds ...gen.Condition) ITApipathDo
	Order(conds ...field.Expr) ITApipathDo
	Distinct(cols ...field.Expr) ITApipathDo
	Omit(cols ...field.Expr) ITApipathDo
	Join(table schema.Tabler, on ...field.Expr) ITApipathDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITApipathDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITApipathDo
	Group(cols ...field.Expr) ITApipathDo
	Having(conds ...gen.Condition) ITApipathDo
	Limit(limit int) ITApipathDo
	Offset(offset int) ITApipathDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITApipathDo
	Unscoped() ITApipathDo
	Create(values ...*model.TApipath) error
	CreateInBatches(values []*model.TApipath, batchSize int) error
	Save(values ...*model.TApipath) error
	First() (*model.TApipath, error)
	Take() (*model.TApipath, error)
	Last() (*model.TApipath, error)
	Find() ([]*model.TApipath, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TApipath, err error)
	FindInBatches(result *[]*model.TApipath, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TApipath) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITApipathDo
	Assign(attrs ...field.AssignExpr) ITApipathDo
	Joins(fields ...field.RelationField) ITApipathDo
	Preload(fields ...field.RelationField) ITApipathDo
	FirstOrInit() (*model.TApipath, error)
	FirstOrCreate() (*model.TApipath, error)
	FindByPage(offset int, limit int) (result []*model.TApipath, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITApipathDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tApipathDo) Debug() ITApipathDo {
	return t.withDO(t.DO.Debug())
}

func (t tApipathDo) WithContext(ctx context.Context) ITApipathDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tApipathDo) ReadDB() ITApipathDo {
	return t.Clauses(dbresolver.Read)
}

func (t tApipathDo) WriteDB() ITApipathDo {
	return t.Clauses(dbresolver.Write)
}

func (t tApipathDo) Session(config *gorm.Session) ITApipathDo {
	return t.withDO(t.DO.Session(config))
}

func (t tApipathDo) Clauses(conds ...clause.Expression) ITApipathDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tApipathDo) Returning(value interface{}, columns ...string) ITApipathDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tApipathDo) Not(conds ...gen.Condition) ITApipathDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tApipathDo) Or(conds ...gen.Condition) ITApipathDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tApipathDo) Select(conds ...field.Expr) ITApipathDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tApipathDo) Where(conds ...gen.Condition) ITApipathDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tApipathDo) Order(conds ...field.Expr) ITApipathDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tApipathDo) Distinct(cols ...field.Expr) ITApipathDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tApipathDo) Omit(cols ...field.Expr) ITApipathDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tApipathDo) Join(table schema.Tabler, on ...field.Expr) ITApipathDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tApipathDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITApipathDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tApipathDo) RightJoin(table schema.Tabler, on ...field.Expr) ITApipathDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tApipathDo) Group(cols ...field.Expr) ITApipathDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tApipathDo) Having(conds ...gen.Condition) ITApipathDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tApipathDo) Limit(limit int) ITApipathDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tApipathDo) Offset(offset int) ITApipathDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tApipathDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITApipathDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tApipathDo) Unscoped() ITApipathDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tApipathDo) Create(values ...*model.TApipath) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tApipathDo) CreateInBatches(values []*model.TApipath, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tApipathDo) Save(values ...*model.TApipath) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tApipathDo) First() (*model.TApipath, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TApipath), nil
	}
}

func (t tApipathDo) Take() (*model.TApipath, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TApipath), nil
	}
}

func (t tApipathDo) Last() (*model.TApipath, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TApipath), nil
	}
}

func (t tApipathDo) Find() ([]*model.TApipath, error) {
	result, err := t.DO.Find()
	return result.([]*model.TApipath), err
}

func (t tApipathDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TApipath, err error) {
	buf := make([]*model.TApipath, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tApipathDo) FindInBatches(result *[]*model.TApipath, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tApipathDo) Attrs(attrs ...field.AssignExpr) ITApipathDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tApipathDo) Assign(attrs ...field.AssignExpr) ITApipathDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tApipathDo) Joins(fields ...field.RelationField) ITApipathDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tApipathDo) Preload(fields ...field.RelationField) ITApipathDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tApipathDo) FirstOrInit() (*model.TApipath, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TApipath), nil
	}
}

func (t tApipathDo) FirstOrCreate() (*model.TApipath, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TApipath), nil
	}
}

func (t tApipathDo) FindByPage(offset int, limit int) (result []*model.TApipath, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tApipathDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tApipathDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tApipathDo) Delete(models ...*model.TApipath) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tApipathDo) withDO(do gen.Dao) *tApipathDo {
	t.DO = *do.(*gen.DO)
	return t
}

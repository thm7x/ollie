// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.pypygo.com/vertex/ollie/apps/account/dao/model"
)

func newTAccount(db *gorm.DB, opts ...gen.DOOption) tAccount {
	_tAccount := tAccount{}

	_tAccount.tAccountDo.UseDB(db, opts...)
	_tAccount.tAccountDo.UseModel(&model.TAccount{})

	tableName := _tAccount.tAccountDo.TableName()
	_tAccount.ALL = field.NewAsterisk(tableName)
	_tAccount.ID = field.NewInt64(tableName, "id")
	_tAccount.Name = field.NewString(tableName, "name")
	_tAccount.IsDeny = field.NewBool(tableName, "is_deny")
	_tAccount.Roles = field.NewString(tableName, "roles")
	_tAccount.Phone = field.NewString(tableName, "phone")
	_tAccount.FeishuOpenid = field.NewString(tableName, "feishu_openid")
	_tAccount.FeishuUnionid = field.NewString(tableName, "feishu_unionid")
	_tAccount.FeishuNickname = field.NewString(tableName, "feishu_nickname")
	_tAccount.FeishuAvatar = field.NewString(tableName, "feishu_avatar")
	_tAccount.WxOpenid = field.NewString(tableName, "wx_openid")
	_tAccount.WxUnionid = field.NewString(tableName, "wx_unionid")
	_tAccount.CreateAt = field.NewInt64(tableName, "create_at")
	_tAccount.UpdateAt = field.NewInt64(tableName, "update_at")
	_tAccount.DeleteAt = field.NewInt64(tableName, "delete_at")

	_tAccount.fillFieldMap()

	return _tAccount
}

type tAccount struct {
	tAccountDo

	ALL            field.Asterisk
	ID             field.Int64
	Name           field.String
	IsDeny         field.Bool   // 拉黑禁止登陆标记
	Roles          field.String // 当前账户赋予的api权限角色集合
	Phone          field.String
	FeishuOpenid   field.String
	FeishuUnionid  field.String // 绑定账户飞书平台的唯一unionid
	FeishuNickname field.String
	FeishuAvatar   field.String
	WxOpenid       field.String
	WxUnionid      field.String // 绑定账户微信平台的唯一unionid
	CreateAt       field.Int64
	UpdateAt       field.Int64
	DeleteAt       field.Int64

	fieldMap map[string]field.Expr
}

func (t tAccount) Table(newTableName string) *tAccount {
	t.tAccountDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAccount) As(alias string) *tAccount {
	t.tAccountDo.DO = *(t.tAccountDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAccount) updateTableName(table string) *tAccount {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.IsDeny = field.NewBool(table, "is_deny")
	t.Roles = field.NewString(table, "roles")
	t.Phone = field.NewString(table, "phone")
	t.FeishuOpenid = field.NewString(table, "feishu_openid")
	t.FeishuUnionid = field.NewString(table, "feishu_unionid")
	t.FeishuNickname = field.NewString(table, "feishu_nickname")
	t.FeishuAvatar = field.NewString(table, "feishu_avatar")
	t.WxOpenid = field.NewString(table, "wx_openid")
	t.WxUnionid = field.NewString(table, "wx_unionid")
	t.CreateAt = field.NewInt64(table, "create_at")
	t.UpdateAt = field.NewInt64(table, "update_at")
	t.DeleteAt = field.NewInt64(table, "delete_at")

	t.fillFieldMap()

	return t
}

func (t *tAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAccount) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["is_deny"] = t.IsDeny
	t.fieldMap["roles"] = t.Roles
	t.fieldMap["phone"] = t.Phone
	t.fieldMap["feishu_openid"] = t.FeishuOpenid
	t.fieldMap["feishu_unionid"] = t.FeishuUnionid
	t.fieldMap["feishu_nickname"] = t.FeishuNickname
	t.fieldMap["feishu_avatar"] = t.FeishuAvatar
	t.fieldMap["wx_openid"] = t.WxOpenid
	t.fieldMap["wx_unionid"] = t.WxUnionid
	t.fieldMap["create_at"] = t.CreateAt
	t.fieldMap["update_at"] = t.UpdateAt
	t.fieldMap["delete_at"] = t.DeleteAt
}

func (t tAccount) clone(db *gorm.DB) tAccount {
	t.tAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tAccount) replaceDB(db *gorm.DB) tAccount {
	t.tAccountDo.ReplaceDB(db)
	return t
}

type tAccountDo struct{ gen.DO }

type ITAccountDo interface {
	gen.SubQuery
	Debug() ITAccountDo
	WithContext(ctx context.Context) ITAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITAccountDo
	WriteDB() ITAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITAccountDo
	Not(conds ...gen.Condition) ITAccountDo
	Or(conds ...gen.Condition) ITAccountDo
	Select(conds ...field.Expr) ITAccountDo
	Where(conds ...gen.Condition) ITAccountDo
	Order(conds ...field.Expr) ITAccountDo
	Distinct(cols ...field.Expr) ITAccountDo
	Omit(cols ...field.Expr) ITAccountDo
	Join(table schema.Tabler, on ...field.Expr) ITAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITAccountDo
	Group(cols ...field.Expr) ITAccountDo
	Having(conds ...gen.Condition) ITAccountDo
	Limit(limit int) ITAccountDo
	Offset(offset int) ITAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITAccountDo
	Unscoped() ITAccountDo
	Create(values ...*model.TAccount) error
	CreateInBatches(values []*model.TAccount, batchSize int) error
	Save(values ...*model.TAccount) error
	First() (*model.TAccount, error)
	Take() (*model.TAccount, error)
	Last() (*model.TAccount, error)
	Find() ([]*model.TAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAccount, err error)
	FindInBatches(result *[]*model.TAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITAccountDo
	Assign(attrs ...field.AssignExpr) ITAccountDo
	Joins(fields ...field.RelationField) ITAccountDo
	Preload(fields ...field.RelationField) ITAccountDo
	FirstOrInit() (*model.TAccount, error)
	FirstOrCreate() (*model.TAccount, error)
	FindByPage(offset int, limit int) (result []*model.TAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.TAccount, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (t tAccountDo) FilterWithNameAndRole(name string, role string) (result []model.TAccount, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM t_accounts WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t tAccountDo) Debug() ITAccountDo {
	return t.withDO(t.DO.Debug())
}

func (t tAccountDo) WithContext(ctx context.Context) ITAccountDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAccountDo) ReadDB() ITAccountDo {
	return t.Clauses(dbresolver.Read)
}

func (t tAccountDo) WriteDB() ITAccountDo {
	return t.Clauses(dbresolver.Write)
}

func (t tAccountDo) Session(config *gorm.Session) ITAccountDo {
	return t.withDO(t.DO.Session(config))
}

func (t tAccountDo) Clauses(conds ...clause.Expression) ITAccountDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAccountDo) Returning(value interface{}, columns ...string) ITAccountDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAccountDo) Not(conds ...gen.Condition) ITAccountDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAccountDo) Or(conds ...gen.Condition) ITAccountDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAccountDo) Select(conds ...field.Expr) ITAccountDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAccountDo) Where(conds ...gen.Condition) ITAccountDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAccountDo) Order(conds ...field.Expr) ITAccountDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAccountDo) Distinct(cols ...field.Expr) ITAccountDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAccountDo) Omit(cols ...field.Expr) ITAccountDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAccountDo) Join(table schema.Tabler, on ...field.Expr) ITAccountDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITAccountDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) ITAccountDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAccountDo) Group(cols ...field.Expr) ITAccountDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAccountDo) Having(conds ...gen.Condition) ITAccountDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAccountDo) Limit(limit int) ITAccountDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAccountDo) Offset(offset int) ITAccountDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITAccountDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAccountDo) Unscoped() ITAccountDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAccountDo) Create(values ...*model.TAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAccountDo) CreateInBatches(values []*model.TAccount, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAccountDo) Save(values ...*model.TAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAccountDo) First() (*model.TAccount, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAccount), nil
	}
}

func (t tAccountDo) Take() (*model.TAccount, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAccount), nil
	}
}

func (t tAccountDo) Last() (*model.TAccount, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAccount), nil
	}
}

func (t tAccountDo) Find() ([]*model.TAccount, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAccount), err
}

func (t tAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAccount, err error) {
	buf := make([]*model.TAccount, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAccountDo) FindInBatches(result *[]*model.TAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAccountDo) Attrs(attrs ...field.AssignExpr) ITAccountDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAccountDo) Assign(attrs ...field.AssignExpr) ITAccountDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAccountDo) Joins(fields ...field.RelationField) ITAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAccountDo) Preload(fields ...field.RelationField) ITAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAccountDo) FirstOrInit() (*model.TAccount, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAccount), nil
	}
}

func (t tAccountDo) FirstOrCreate() (*model.TAccount, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAccount), nil
	}
}

func (t tAccountDo) FindByPage(offset int, limit int) (result []*model.TAccount, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAccountDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAccountDo) Delete(models ...*model.TAccount) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAccountDo) withDO(do gen.Dao) *tAccountDo {
	t.DO = *do.(*gen.DO)
	return t
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.pypygo.com/vertex/ollie/apps/account/dao/model"
)

func newTAllAuthxRule(db *gorm.DB, opts ...gen.DOOption) tAllAuthxRule {
	_tAllAuthxRule := tAllAuthxRule{}

	_tAllAuthxRule.tAllAuthxRuleDo.UseDB(db, opts...)
	_tAllAuthxRule.tAllAuthxRuleDo.UseModel(&model.TAllAuthxRule{})

	tableName := _tAllAuthxRule.tAllAuthxRuleDo.TableName()
	_tAllAuthxRule.ALL = field.NewAsterisk(tableName)
	_tAllAuthxRule.ID = field.NewInt64(tableName, "id")
	_tAllAuthxRule.Ptype = field.NewString(tableName, "ptype")
	_tAllAuthxRule.V0 = field.NewString(tableName, "v0")
	_tAllAuthxRule.V1 = field.NewString(tableName, "v1")
	_tAllAuthxRule.V2 = field.NewString(tableName, "v2")
	_tAllAuthxRule.V3 = field.NewString(tableName, "v3")
	_tAllAuthxRule.V4 = field.NewString(tableName, "v4")
	_tAllAuthxRule.V5 = field.NewString(tableName, "v5")

	_tAllAuthxRule.fillFieldMap()

	return _tAllAuthxRule
}

type tAllAuthxRule struct {
	tAllAuthxRuleDo

	ALL   field.Asterisk
	ID    field.Int64
	Ptype field.String
	V0    field.String
	V1    field.String
	V2    field.String
	V3    field.String
	V4    field.String
	V5    field.String

	fieldMap map[string]field.Expr
}

func (t tAllAuthxRule) Table(newTableName string) *tAllAuthxRule {
	t.tAllAuthxRuleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAllAuthxRule) As(alias string) *tAllAuthxRule {
	t.tAllAuthxRuleDo.DO = *(t.tAllAuthxRuleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAllAuthxRule) updateTableName(table string) *tAllAuthxRule {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Ptype = field.NewString(table, "ptype")
	t.V0 = field.NewString(table, "v0")
	t.V1 = field.NewString(table, "v1")
	t.V2 = field.NewString(table, "v2")
	t.V3 = field.NewString(table, "v3")
	t.V4 = field.NewString(table, "v4")
	t.V5 = field.NewString(table, "v5")

	t.fillFieldMap()

	return t
}

func (t *tAllAuthxRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAllAuthxRule) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["ptype"] = t.Ptype
	t.fieldMap["v0"] = t.V0
	t.fieldMap["v1"] = t.V1
	t.fieldMap["v2"] = t.V2
	t.fieldMap["v3"] = t.V3
	t.fieldMap["v4"] = t.V4
	t.fieldMap["v5"] = t.V5
}

func (t tAllAuthxRule) clone(db *gorm.DB) tAllAuthxRule {
	t.tAllAuthxRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tAllAuthxRule) replaceDB(db *gorm.DB) tAllAuthxRule {
	t.tAllAuthxRuleDo.ReplaceDB(db)
	return t
}

type tAllAuthxRuleDo struct{ gen.DO }

type ITAllAuthxRuleDo interface {
	gen.SubQuery
	Debug() ITAllAuthxRuleDo
	WithContext(ctx context.Context) ITAllAuthxRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITAllAuthxRuleDo
	WriteDB() ITAllAuthxRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITAllAuthxRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITAllAuthxRuleDo
	Not(conds ...gen.Condition) ITAllAuthxRuleDo
	Or(conds ...gen.Condition) ITAllAuthxRuleDo
	Select(conds ...field.Expr) ITAllAuthxRuleDo
	Where(conds ...gen.Condition) ITAllAuthxRuleDo
	Order(conds ...field.Expr) ITAllAuthxRuleDo
	Distinct(cols ...field.Expr) ITAllAuthxRuleDo
	Omit(cols ...field.Expr) ITAllAuthxRuleDo
	Join(table schema.Tabler, on ...field.Expr) ITAllAuthxRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAllAuthxRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITAllAuthxRuleDo
	Group(cols ...field.Expr) ITAllAuthxRuleDo
	Having(conds ...gen.Condition) ITAllAuthxRuleDo
	Limit(limit int) ITAllAuthxRuleDo
	Offset(offset int) ITAllAuthxRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITAllAuthxRuleDo
	Unscoped() ITAllAuthxRuleDo
	Create(values ...*model.TAllAuthxRule) error
	CreateInBatches(values []*model.TAllAuthxRule, batchSize int) error
	Save(values ...*model.TAllAuthxRule) error
	First() (*model.TAllAuthxRule, error)
	Take() (*model.TAllAuthxRule, error)
	Last() (*model.TAllAuthxRule, error)
	Find() ([]*model.TAllAuthxRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAllAuthxRule, err error)
	FindInBatches(result *[]*model.TAllAuthxRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAllAuthxRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITAllAuthxRuleDo
	Assign(attrs ...field.AssignExpr) ITAllAuthxRuleDo
	Joins(fields ...field.RelationField) ITAllAuthxRuleDo
	Preload(fields ...field.RelationField) ITAllAuthxRuleDo
	FirstOrInit() (*model.TAllAuthxRule, error)
	FirstOrCreate() (*model.TAllAuthxRule, error)
	FindByPage(offset int, limit int) (result []*model.TAllAuthxRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAllAuthxRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tAllAuthxRuleDo) Debug() ITAllAuthxRuleDo {
	return t.withDO(t.DO.Debug())
}

func (t tAllAuthxRuleDo) WithContext(ctx context.Context) ITAllAuthxRuleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAllAuthxRuleDo) ReadDB() ITAllAuthxRuleDo {
	return t.Clauses(dbresolver.Read)
}

func (t tAllAuthxRuleDo) WriteDB() ITAllAuthxRuleDo {
	return t.Clauses(dbresolver.Write)
}

func (t tAllAuthxRuleDo) Session(config *gorm.Session) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Session(config))
}

func (t tAllAuthxRuleDo) Clauses(conds ...clause.Expression) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAllAuthxRuleDo) Returning(value interface{}, columns ...string) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAllAuthxRuleDo) Not(conds ...gen.Condition) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAllAuthxRuleDo) Or(conds ...gen.Condition) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAllAuthxRuleDo) Select(conds ...field.Expr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAllAuthxRuleDo) Where(conds ...gen.Condition) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAllAuthxRuleDo) Order(conds ...field.Expr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAllAuthxRuleDo) Distinct(cols ...field.Expr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAllAuthxRuleDo) Omit(cols ...field.Expr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAllAuthxRuleDo) Join(table schema.Tabler, on ...field.Expr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAllAuthxRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAllAuthxRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAllAuthxRuleDo) Group(cols ...field.Expr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAllAuthxRuleDo) Having(conds ...gen.Condition) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAllAuthxRuleDo) Limit(limit int) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAllAuthxRuleDo) Offset(offset int) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAllAuthxRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAllAuthxRuleDo) Unscoped() ITAllAuthxRuleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAllAuthxRuleDo) Create(values ...*model.TAllAuthxRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAllAuthxRuleDo) CreateInBatches(values []*model.TAllAuthxRule, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAllAuthxRuleDo) Save(values ...*model.TAllAuthxRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAllAuthxRuleDo) First() (*model.TAllAuthxRule, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAllAuthxRule), nil
	}
}

func (t tAllAuthxRuleDo) Take() (*model.TAllAuthxRule, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAllAuthxRule), nil
	}
}

func (t tAllAuthxRuleDo) Last() (*model.TAllAuthxRule, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAllAuthxRule), nil
	}
}

func (t tAllAuthxRuleDo) Find() ([]*model.TAllAuthxRule, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAllAuthxRule), err
}

func (t tAllAuthxRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAllAuthxRule, err error) {
	buf := make([]*model.TAllAuthxRule, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAllAuthxRuleDo) FindInBatches(result *[]*model.TAllAuthxRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAllAuthxRuleDo) Attrs(attrs ...field.AssignExpr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAllAuthxRuleDo) Assign(attrs ...field.AssignExpr) ITAllAuthxRuleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAllAuthxRuleDo) Joins(fields ...field.RelationField) ITAllAuthxRuleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAllAuthxRuleDo) Preload(fields ...field.RelationField) ITAllAuthxRuleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAllAuthxRuleDo) FirstOrInit() (*model.TAllAuthxRule, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAllAuthxRule), nil
	}
}

func (t tAllAuthxRuleDo) FirstOrCreate() (*model.TAllAuthxRule, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAllAuthxRule), nil
	}
}

func (t tAllAuthxRuleDo) FindByPage(offset int, limit int) (result []*model.TAllAuthxRule, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAllAuthxRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAllAuthxRuleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAllAuthxRuleDo) Delete(models ...*model.TAllAuthxRule) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAllAuthxRuleDo) withDO(do gen.Dao) *tAllAuthxRuleDo {
	t.DO = *do.(*gen.DO)
	return t
}
